#!/bin/bash -ex

## Get the basic setup/info
HOST=$(hostname --short)
echo "Building on ${HOST}"
echo "  DIST=${DIST}"
echo "  BPTAG=${BPTAG}"
echo "  WS=$WORKSPACE"
echo "  PWD=$(pwd)"
echo "  BRANCH=$BRANCH"
echo "  SHA1=$GIT_COMMIT"

if [ -x "$BRANCH" ] ; then
    echo "No git branch was supplied"
    exit 1
fi

echo "Building version $(git describe) Branch $BRANCH"

## Make sure the repo is clean
# TODO -- add cleanup steps, here
# Remove all untracked files
echo "Cleaning up the repo"
git clean -fxd

# Make sure the dist directory is clean
rm -rf dist
mkdir -p dist

## Install any setup-time deps
# TODO -- upload install-deps.sh script that installs the build-time dependencies to upstream repo or update this section
# We need this for mk-build-deps
sudo apt-get install equivs
# Run the install-deps.sh upstream script if it exists
if [ -x install-deps.sh ]; then
  echo "Ensuring dependencies are installed"
  ./install-deps.sh
fi

## Get the version
# TODO -- upload get-versions.sh script that prints out VERSION=<version> and REVISION=<revision> to upstream repo or update this section
eval $(./get-versions.sh)
RPM_RELEASE=$(echo $REVISION | tr '-' '_')

## Build the source tarball
# TODO -- upload make-dist script that stores the tarball in dist/ to upstream repo or update this section
echo "Building source distribution"
if [ -x make-dist ]; then
  echo "Ensuring dependencies are installed"
  ./make-dist
fi

## Prepare the spec file for build
# TODO -- Make sure the spec(.in) file is tracked upstream
sed -e "s/@VERSION@/${VERSION}/g" -e "s/@RELEASE@/${RPM_RELEASE}/g" < PROJECT.spec.in > dist/PROJECT.spec

## Prepare the debian files
# TODO -- Make sure the debian folder is tracked upstream
# Bump the changelog
dch -v "$VERSION" "New release ($VERSION)"

# Install debian build-time dependencies
yes | sudo mk-build-deps --install debian/control

# Create .dsc and source tarball
sudo dpkg-buildpackage -S -us -uc

cp ../PROJECT_$VERSION* dist/

## Save these so that we can later inject them into the build script
cat > dist/inject << EOF
SHA1=${GIT_COMMIT}
BRANCH=${BRANCH}
VERSION=${VERSION}
REVISION=${REVISION}
RPM_RELEASE=${RPM_RELEASE}
EOF
